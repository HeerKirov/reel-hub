// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectType {
  ANIME
  GAME
  MOVIE
  NOVEL
  MANGA
}

enum OriginalType {
  ORIGINAL
  GAME
  NOVEL
  MANGA
  OTHER
}

enum BoardcastType {
  TV_AND_WEB
  OVA_AND_OAD
  MOVIE
  OTHER
}

enum OnlineType {
  SINGLE_PLAYER
  MULTI_PLAYER
  ONLINE_GAME
}

enum RecordStatus {
  WATCHING // 进行中
  COMPLETED // 已结束
  ON_HOLD // 暂停
  DROPPED // 弃坑
}

enum FollowType {
  //追番
  FOLLOW
  //补番,
  CATCH_UP
  //重看
  REWATCH
}

enum ShoppingType {
  //本体
  MAIN
  //DLC
  DLC
  //内购
  IN_APP_PURCHASE
  //订阅
  SUBSCRIPTION
  //其他
  OTHER
}

model Project {
  id                 String   @id @default(nanoid())
  title              String   @db.VarChar(256)
  subtitles          String   @db.Text
  description        String   @db.Text
  keywords           String   @db.Text
  type               ProjectType
  publishTime        String?   @db.VarChar(10)
  ratingS            Int?
  ratingV            Int?
  region             String?
  relations          Json
  relationsTopology  Json
  resources          Json
  createTime         DateTime
  updateTime         DateTime
  creator            String   @db.VarChar(24)
  updator            String   @db.VarChar(24)

  // Anime specific fields
  originalType             OriginalType?
  boardcastType            BoardcastType?
  episodeDuration          Int?
  episodeTotalNum          Int?
  episodePublishedNum      Int?
  episodePublishedRecords  Json?
  episodePublishPlan       Json?

  // Game specific fields
  platform    String[] @db.VarChar(64)
  onlineType  OnlineType?

  // Relations
  staffs         ProjectStaffRelation[]
  tags           ProjectTagRelation[]
  boughtRecords  Bought[]
  records        Record[]
  comments       Comment[]
  RecordProgress RecordProgress[]

  @@index([type, publishTime])
}

model Staff {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(256) @unique
  otherNames  String   @db.VarChar(256)
  description String   @db.Text
  createTime  DateTime
  updateTime  DateTime
  creator     String   @db.VarChar(24)
  updator     String   @db.VarChar(24)

  projects ProjectStaffRelation[]
}

model ProjectStaffRelation {
  projectId String
  staffId   Int
  staffType String @db.VarChar(256)

  project Project @relation(fields: [projectId], references: [id])
  staff   Staff   @relation(fields: [staffId], references: [id])

  @@id([projectId, staffId, staffType])
}

model Tag {
  id          Int      @id @default(autoincrement())
  type        ProjectType
  name        String   @db.VarChar(256)
  description String   @db.Text
  createTime  DateTime
  updateTime  DateTime
  creator     String   @db.VarChar(24)
  updator     String   @db.VarChar(24)

  projects ProjectTagRelation[]

  @@unique([type, name])
}

model ProjectTagRelation {
  projectId String
  tagId     Int

  project Project @relation(fields: [projectId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])
}

model Bought {
  id          Int      @id @default(autoincrement())
  ownerId     String   @db.VarChar(24)
  projectId   String
  buyType     ShoppingType
  description String   @db.Text
  cost        Decimal  @db.Decimal(10, 2)
  currency    String   @db.VarChar(8)
  buyTime     DateTime
  createTime  DateTime
  updateTime  DateTime

  project Project @relation(fields: [projectId], references: [id])

  @@unique([ownerId, projectId])
}

model Record {
  id          Int       @id @default(autoincrement())
  ownerId     String    @db.VarChar(24)
  projectId   String
  specialAttention Boolean
  status      RecordStatus
  progressCount Int
  startTime   DateTime?
  endTime     DateTime?
  lastActivityTime DateTime?
  lastActivityEvent Json @default("{}")
  createTime DateTime
  updateTime DateTime

  project    Project          @relation(fields: [projectId], references: [id])
  progresses RecordProgress[]

  @@unique([ownerId, projectId])
}

model RecordProgress {
  id         Int       @id @default(autoincrement())
  projectId  String
  recordId   Int
  ordinal    Int
  status     RecordStatus
  startTime  DateTime?
  endTime    DateTime?
  createTime DateTime
  updateTime DateTime

  // Anime specific fields
  episodeWatchedNum     Int?
  episodeWatchedRecords Json?
  followType             FollowType?

  // Game specific fields
  platform String[] @db.VarChar(64)

  project Project @relation(fields: [projectId], references: [id])
  record  Record  @relation(fields: [recordId], references: [id])
}

model Comment {
  id              Int      @id @default(autoincrement())
  ownerId         String   @db.VarChar(24)
  projectId       String
  score           Int?
  title           String?  @db.Text
  article         String?  @db.Text
  createTime      DateTime
  updateTime      DateTime

  project Project @relation(fields: [projectId], references: [id])

  @@unique([ownerId, projectId])
}

model Statistic {
  id          Int      @id @default(autoincrement())
  ownerId     String   @db.VarChar(24)
  type        String   @db.VarChar(256)
  key         String?  @db.VarChar(256)
  content     Json
  createTime  DateTime
  updateTime  DateTime

  @@unique([ownerId, type, key])
}
